import java.text.SimpleDateFormat

plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id 'de.aaschmid.cpd' version '3.1'
    id 'com.gorylenko.gradle-git-properties' version '2.2.2'
    id "org.sonarqube" version "2.7.1"
}

group = 'woos'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
    set('springCloudVersion', "Hoxton.SR6")
    gitBranchName = "master"
    myDateFormat = "yyyy-MM-dd HH:mm:ss"
    myDateFormatTimeZone = "Asia/Seoul"
}

springBoot {
    buildInfo {
        properties {
            // Generate extra build info.
            additional = [
                    os     : "${System.properties['os.name']} (${System.properties['os.version']})",
                    machine: InetAddress.localHost.hostName,
                    time   : buildTime()
            ]
        }
    }
}

def buildTime() {
    final dateFormat = new SimpleDateFormat(myDateFormat)
    dateFormat.timeZone = TimeZone.getTimeZone(myDateFormatTimeZone)
    dateFormat.format(new Date())
}

gitProperties {
    dateFormat = myDateFormat
    dateFormatTimeZone = myDateFormatTimeZone
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'io.github.openfeign:feign-httpclient'
    implementation 'io.github.openfeign:feign-hystrix'
    implementation 'org.apache.httpcomponents:httpclient'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
    runtimeOnly 'org.springframework.retry:spring-retry'
    implementation 'org.projectlombok:lombok'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.modelmapper:modelmapper:2.3.8'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'io.projectreactor:reactor-core:3.3.7.RELEASE'
    implementation 'io.projectreactor:reactor-test:3.3.7.RELEASE'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.awaitility:awaitility:4.0.3'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

checkstyle {
    toolVersion = '8.8'
    maxWarnings = 0
}

jacoco {
    toolVersion = '0.8.2'
}

pmd {
    toolVersion = '6.25.0'
    ruleSets = ["java-basic", "java-braces", "java-unnecessary", "java-empty"]
    sourceSets = [project.sourceSets.main]
    ignoreFailures = true
}

cpd {
    toolVersion = pmd.toolVersion
    sourceSets = [project.sourceSets.main as SourceSet]
    minimumTokenCount = 20
    ignoreFailures = true
}

cpdCheck {
    reports {
        xml.enabled = true
    }
    source = sourceSets.main.allJava
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

bootRun {
    systemProperties = System.properties
}
